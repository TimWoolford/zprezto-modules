#function updateEnvironment {

function stageTitle {
  printf "${FX[bold]}${FG[blue]}=> %s${FG[none]}${FX[none]}\n" "${1}"
}

function subTitle {
  printf "${FG[blue]}==> %s${FG[none]}\n" "${1}"
}

function updateEnvironment_setSshKeys {
  stageTitle "Updating SSH keys"
  local -a privateKeyFiles=("${ZDOTDIR}"/ssh/*_rsa(N))
  if [[ ${#privateKeyFiles[@]} -gt 0 ]]; then
    subTitle "Adding SSH keys"
    for identityFile in "${privateKeyFiles[@]}"; do
      chmod 600 "${identityFile}"
      ssh-add --apple-use-keychain "${identityFile}"
    done
  fi

  local -a publicKeyFiles=("${ZDOTDIR}"/ssh/*_rsa.pub(N))
  if [[ ${#publicKeyFiles[@]} -gt 0 ]]; then
    subTitle "Adding Authorized Keys"
    for identityFile in "${publicKeyFiles[@]}"; do
      echo "Adding ${identityFile}"
      local pubKey=$(cat "$identityFile")
      grep -q -F "${pubKey}" ~/.ssh/authorized_keys 2>/dev/null || echo "${pubKey}" >> ~/.ssh/authorized_keys
    done
  fi
}

function updateEnvironment_updateModules {
  local modules user_module_dirs
  zstyle -a ':prezto:load' pmodule-dirs 'user_module_dirs'
  zstyle -a ':prezto:load' pmodule 'modules'

  for module in "${modules[@]}"; do
    locations=(${user_module_dirs:+${^user_module_dirs}/$module(-/FN)})
    if (( ${#locations} != 1 )); then
      continue
    fi

    local module_location=${locations[-1]}

    if [[ -s "${module_location}/upgrade.zsh" ]]; then
      stageTitle "Updating module ${module}"
      source "${module_location}/upgrade.zsh"
    fi
  done
}

function updateEnvironment_setLinks {

  function setLinks_link {
    local linkName=$1
    local target=$2

    if [ -e "${target}" ]; then
      mkdir -p "${linkName:h}"

      if [ -e "${linkName}" ]; then
        rm -rf "${linkName}"
      fi
      ln -sfnv "${target}" "${linkName}"
    fi
  }

  function setLinks_nolink {
    local target=$1
    local source=$2

    mkdir -p "${target}"

    setLinks_doLinking "${source}" "${target}" ""
  }

  function setLinks_doLinking {
    local target=$2
    local dot=$3

    for linkPath in "${1}"/*
    do
      local linkName=${linkPath:t}

      if [[ "${linkName}" =~ "_nolink$" ]]; then
        setLinks_nolink "${target}/${dot}${linkName%_nolink}" "${linkPath}"
      else
        setLinks_link "${target}/${dot}${linkName}" "${linkPath}"
      fi
    done
  }

  function setLinks_clearBrokenLinks {
      for link in $(find ${HOME} -maxdepth 1 -type l); do
        if [ ! -e "${link}" ]; then
          echo "${FG[red]}Removing broken link [${link}].${FG[none]}"
          unlink "${link}"
        fi
      done
  }

  {
    stageTitle "Linking dotfiles"
    setLinks_doLinking "${ZDOTDIR}/dotfiles" ~ "."
    setLinks_link ~/.m2/repository ~/repository
    setLinks_clearBrokenLinks

  } always {
    unfunction setLinks_link
    unfunction setLinks_nolink
    unfunction setLinks_doLinking
    unfunction setLinks_clearBrokenLinks
  }
}


{
  stageTitle "Updating environment"
  subTitle "Update git env dir"
  git -C "${ZDOTDIR}" pull origin "${ZDOTDIR_BRANCH:-master}"
  subTitle "Update git env submodules"
  git -C "${ZDOTDIR}" submodule update --init --recursive --remote

  stageTitle "Updating homebrew"
  subTitle "Update brew"
  brew update && brew upgrade
  brew tap homebrew/bundle
  subTitle "Update brewfile bundle"
  brew bundle --verbose --file="${ZDOTDIR}/Brewfile"

  updateEnvironment_setSshKeys
  updateEnvironment_setLinks
  updateEnvironment_updateModules

  stageTitle "Reloading Completions"
  rm -rf ${ZDOTDIR:-$HOME}/.zcompdump{,.zwc} ${XDG_CACHE_HOME:-$HOME/.cache}/prezto/zcomp{cache,dump}
  autoload -Uz compinit && compinit

  zcompdump="${XDG_CACHE_HOME:-$HOME/.cache}/prezto/zcompdump"
  compinit -C -d "$zcompdump"
  zcompile "$zcompdump"

  date +%s >| ~/.environment_lastupdate
  printf "\n\n${FX[bold]}${FG[yellow]}%s${FG[none]}${FX[none]}\n" "You will need to reopen a terminal session to benefit from any updates"

} always {
  unfunction updateEnvironment_setSshKeys
  unfunction updateEnvironment_updateModules
  unfunction updateEnvironment_setLinks
  unfunction stageTitle
  unfunction subTitle
}
#}
